#!/usr/bin/env python3

import rospy
from duckietown_msgs.msg import Twist2DStamped, AprilTagDetectionArray

class FollowerBot:
    def __init__(self):
        # Initialize ROS node
        rospy.init_node('follower_bot_node', anonymous=True)

        # When shutdown signal is received, run shutdown_procedure function
        rospy.on_shutdown(self.shutdown_procedure)

        # Initialize publisher and subscriber
        self.velocity_publisher = rospy.Publisher('/madtp/car_cmd_switch_node/cmd', Twist2DStamped, queue_size=1)
        self.tag_subscriber = rospy.Subscriber('/madtp/apriltag_detector_node/detections', AprilTagDetectionArray, self.tag_callback, queue_size=1)

        rospy.spin()  # Keep the node running

    # Callback function for AprilTag detections
    def tag_callback(self, msg):
        self.process_detections(msg.detections)

    # Clean shutdown procedure
    def shutdown_procedure(self):
        rospy.loginfo("Shutting down. Stopping the robot...")
        self.halt_movement()

    # Function to halt the robot
    def halt_movement(self):
        stop_msg = Twist2DStamped()
        stop_msg.header.stamp = rospy.Time.now()
        stop_msg.v = 0.0
        stop_msg.omega = 0.0
        self.velocity_publisher.publish(stop_msg)

    # Function to process detections and move the robot accordingly
    def process_detections(self, detections):
        if not detections:
            self.halt_movement()
            return
        
        self.halt_movement()
        tag = detections[0]
        x, y, z = tag.transform.translation.x, tag.transform.translation.y, tag.transform.translation.z
        rospy.loginfo("Tag detected at x: %f, y: %f, z: %f", x, y, z)
        rospy.sleep(1)

        move_msg = Twist2DStamped()
        move_msg.header.stamp = rospy.Time.now()

        if z > 0.15:
            move_msg.v = 0.4
            move_msg.omega = 0.0
            self.velocity_publisher.publish(move_msg)
            rospy.sleep(0.2)
            self.halt_movement()

        if z < 0.10:
            move_msg.v = -0.4
            move_msg.omega = 0.0
            self.velocity_publisher.publish(move_msg)
            rospy.sleep(0.2)
            self.halt_movement()

        if x > 0.05:
            move_msg.v = 0.0
            move_msg.omega = 0.4
            self.velocity_publisher.publish(move_msg)
            rospy.sleep(0.4)
            self.halt_movement()

        if x < -0.05:
            move_msg.v = 0.0
            move_msg.omega = -0.4
            self.velocity_publisher.publish(move_msg)
            rospy.sleep(0.4)
            self.halt_movement()

if __name__ == '__main__':
    try:
        FollowerBot()
    except rospy.ROSInterruptException:
        pass
