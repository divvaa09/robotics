#!/usr/bin/env python
import rospy
from turtlesim.msg import Pose
from std_msgs.msg import Float64
import math

class TurtleDistance:
    def __init__(self):
        # Initialize the node
        rospy.init_node('turtle_distance_node', anonymous=True)

        # Initialize previous x and y positions to None
        self.prev_x = None
        self.prev_y = None

        # Initialize total distance traveled to 0
        self.total_distance = 0.0

        # Subscribe to the turtle's pose topic
        self.pose_sub = rospy.Subscriber('/turtle1/pose', Pose, self.pose_callback)

        # Publisher to publish the total distance traveled
        self.dist_pub = rospy.Publisher('/turtle_dist', Float64, queue_size=10)

        # Spin to keep the script running
        rospy.spin()

    def pose_callback(self, msg):
        # If previous position is known, calculate the distance traveled
        if self.prev_x is not None and self.prev_y is not None:
            distance = math.sqrt((msg.x - self.prev_x)**2 + (msg.y - self.prev_y)**2)
            self.total_distance += distance

        # Update previous x and y positions
        self.prev_x = msg.x
        self.prev_y = msg.y

        # Publish the total distance traveled
        self.dist_pub.publish(self.total_distance)

if __name__ == '__main__':
    try:
        TurtleDistance()
    except rospy.ROSInterruptException:
        pass
